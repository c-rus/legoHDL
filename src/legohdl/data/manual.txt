; File: legoHDL Manual
; Author: Chase Ruskin
; Modified: 11/11/2021
; Created: 10/19/2021
; Description:
;   The help text for each legoHDL command. Provides the name, synopsis,
;   description, and options. Some examples for specific commands too.
; Usage:
;   All lines with ';' are skipped. Each line beginning with an '*' is evaluated
;   to see what command the following text belongs to. Reads all the way up
;   to the next '*'.
; Notes:
;   title delimiter = '.' - separates a title into subsections
;   explicit version = 'v1.0.0' or 'v1_0_0'
;   block = title in M.L.N form
;   Throughout the document, word entity/unit is used. This is synonymous with 
;   the Verilog keyword module. any reference to entity also means module. Using
;   the word entity may be replaced with a better term like: unit, part, chip.

; --- DEVELOPMENT COMMANDS ---


* new
NAME:
        new - Create a new legoHDL block (project)

SYNOPSIS:
        legohdl new <block> [-open] [-remote=<url>] [-no-template]
        legohdl new <file> -file[=<template-file>] [-force]

DESCRIPTION:
        Create a new HDL project recognized by legoHDL as a "block". The block
        will be created under a new folder at the workspace's local path such
        as <workspace-path>/<block-library>/<block-name>. A git repository will 
        be automatically created, and a bare git remote repository URL can be 
        passed for automatic configuration. If a non-bare remote repository is 
        passed, the block will not be created, but can be initialized (see 
        'init' command).

        When copying in the template, files hidden within a hidden directory 
        will not be copied. The files a designer would place inside a hidden 
        directory may be extra files that could be initialized later on a 
        per-block basis.
        
        If trying to create a new file and that path already exists, the
        existing file will not be overwritten unless -force is used.
        :todo:

OPTIONS:
        <block>
            The project's title. A library and a name must be included, and 
            optionally a market can be prepended to the title.

        -open
            Upon creating the block, open it in the configured text-editor.

        -remote=<url>
            A bare remote git repository to be attached to the created block's
            git repository.

        -no-template
            Do not copy in the configured template folder. The created block
            folder will only contain the necessary Block.cfg file.

        <file>
                The filepath to intialize a new file.

        -file[=<template-file>]
                Initialize a new file within the current block. Specifying 
                <template-file> will copy the template file to the desired
                directory with placeholders correctly replaced. Omitting 
                <template-file> will create a blank file.

        -force
                Overwrite the filepath even if it already exists when 
                initializing a file.


* init
NAME:
        init - Initialize a legoHDL block from existing code and block metadata.

SYNOPSIS:
        legohdl init <block> [-remote=<url>] [-market=<mkrt>] 
                [-summary=<summary>]

DESCRIPTION:
        When the current directory or provided remote repository already is a 
        valid legoHDL block, the <block> is ignored.

        When a remote repository is given and it already is a valid block (i.e. 
        the root directory contains a Block.cfg file), the <block> will be 
        ignored and the actual title will be used. This becomes an equivalent to
        using the 'download' command.

OPTIONS:
        <block>
                :ref:

        -remote=<url>
                :ref:

        -market=<mrkt>
                Set the block's market. <market> must be a valid market 
                available in the current workspace.

        -summary=<summary>
                Fill in the summary for the block's metadata. <summary> is a 
                string that describes the current block.


* open
NAME:
        open - Use a text-editor to open a variety of legoHDL-related things

SYNOPSIS:
        legohdl open <block>
        legohdl open [<script-alias>] -script
        legohdl open <profile-name> -profile
        legohdl open (-template | -settings[=<mode>])

DESCRIPTION:
        :todo:

OPTIONS:
        <block>
                :ref:

        <script-alias>
            The alias for the saved custom script within legoHDL. It is a 
            user-defined key in settings under "scripts". If the alias's value 
            is a command that references a real existing file, that file will be
            opened.

        -script
            The flag to indicate a script is trying to be opened. If no 
            <script-alias> value is given with this flag, the built-in scripts 
            folder will be opened.

        <profile-name>
            The profile configuration name stored within legoHDL settings. When 
            valid, that profile directory will open.

        -profile
            The flag to indicate a profile is trying to be opened.

        -template
            The flag to indicate the template is trying to be opened. If the
            configured template value in settings is blank, the built-in 
            template folder will be opened.
        
        -settings[=<mode>]
            The flag to indicate the settings is trying to be opened.

            <mode> determines how to open the settings. Accepted values are gui 
            and file. When omitted, the default is to open the settings in gui 
            mode.

               
* get
NAME:
        get - Print the compatible code for the ports list of a specified entity

SYNOPSIS:
        legohdl get [<block>:]<entity> [-comp[=<lang>] | -inst[=<lang>]] [-arch]
                [-about] [-edges] [-D | -I]

DESCRIPTION:
        When trying to access current block-level entities, the <block>
        can be omitted (a form of shortcutting). To reference a entity,
        <market>.<library>.<name>(<version>):<entity>.

        By default, it will print the 'about' section and the component 
        declaration forVHDL entities or the module interface for Verilog 
        modules.

        If -comp is present when -inst is also present and the language 
        outputted is VHDL, the returned VHDL instantiation code will be a 
        component instantiation. If -comp is omitted in this scenario, 
        the returned VHDL instantiation code will be a direct entity 
        instantiation.

OPTIONS:
        <block>
                The block's title. If omitted, the <entity> is searched for only
                within the current block's scope.

        <entity>
                The design unit name.

        -comp[=<lang>]
                Print the component declaration. For Verilog language, the 
                module interface is printed instead of a component declaration.

                <lang> specifies what HDL language to use to print the formatted
                code. Accepted values are vlog and vhdl. Omitting <lang> prints 
                the code in the entity's original language.

        -inst[=<lang>]
                Print the direct entity instantiation (VHDL-93 feature) or 
                component instantiation. This includes relevant constants for 
                each generic, relevant signals for each port, and the 
                instantiation code. 
                
                <lang> specifies what HDL language to use to print the formatted
                code. Accepted values are vlog and vhdl. Omitting <lang> prints 
                the code in the entity's original language.

        -arch
                List the available architectures. If the entity is a Verilog
                module, only "rtl" will be listed.

        -about
                Print the comment header block found at the beginning of this
                entity's file (if exists). Helpful to read more information
                about an entity and how it behaves.
        
        -edges
                Print the units are required by this unit and print the units 
                that integrate this unit into their design. Gets the edges from
                the hierarchical graph.

        -D
                Search the downloaded blocks to get this entity, regardless of
                the status of 'multi-develop'.

        -I
                Search the installed blocks to get this entity, regardless of 
                the status of 'multi-develop'.


* graph
NAME:
        graph - Visualize the dependency tree for the design

SYNOPSIS:
        legohdl graph [<entity>] [-tb=<tb>] [-ignore-tb]

DESCRIPTION:
        Create and view the dependency tree for the current block design. This 
        command is provided as a guide to quickly help the designer see how the
        design unfolds.

        When no <entity> is given, the top-level will be auto-detected and the
        user will be prompted to select one if multiple exist. When -ignore-tb 
        and -tb=<tb> are absent, the testbench for the top-level entity will be 
        auto-detected, if one exists. The user will be prompted to select one if
         multiple exist.

OPTIONS:
        <entity>
                The design unit to request as top-level.

        -tb=<tb>
                The relevant testbench file to explicitly include in the 
                dependency tree. Has higher precedence of -ignore-tb.
        
        -ignore-tb
                Do not include any testbench unit in the dependency tree.


* export
NAME:
        export - Generate a blueprint file or VHDL package file

SYNOPSIS:
        legohdl export [<entity>] [-tb=<tb>] [-ignore-tb] [-quiet] [-no-clean]
                [-all]
        legohdl export -pack [-omit=<entities>] [-inc=<entities>]

DESCRIPTION:
        :todo:

        For generating a VHDL package file, passing -inc will ignore -omit if it
        is passed to the command-line as well.

OPTIONS:
        <entity>
                The design unit to request as top-level. All relevant HDL files
                will stem from this entity's file.
        
        -tb=<tb>
                Explicitly request what top-level simulation file to include in
                the blueprint.
                
        -ignore-tb
                Do not include a testbench file in the blueprint.

        -quiet
                Do not print intermediate information while the blueprint file 
                is being created.

        -no-clean
                Do not delete the build/ directory when writing the blueprint.

        -all
                Add all block-level source files and their dependencies.


* build
NAME:
        build - Execute a custom backend script/tool command

SYNOPSIS:
        legohdl build +<script-alias> [<script-args...>]

DESCRIPTION:
        :todo:

OPTIONS:
        <script-alias>
                The alias for the saved custom script within legoHDL. It will 
                execute the command as if it was called through the terminal.

        <script-args...>
                Any additonal arguments to pass directly to the called command.
                All arguments after <script-alias> will be passed to the 
                executed command.


* release
NAME:
        release - Set a newer version for the current block

SYNOPSIS:
        legohdl release <version> [-msg=<msg>] [-strict] [-dry-run]

DESCRIPTION:
        :todo:

OPTIONS:
        <version>
                The next version for the current block. The value must be either
                major, minor, patch, or an explicit version.

        -msg=<msg>
                The message to commit with. The value for <msg> is a string and
                if the string includes spaces then quotes must encapsulate 
                <msg>. The default message is: "Releases legohdl version
                <version>".

        -strict
                Only adds and commits the modified changelog (if exists) and the
                Block.cfg file. All other uncommitted changes will not be in
                the following release.
        
        -dry-run
                Perform the complete release process as-if the block was to be
                released, but leaves the block unmodified and unreleased.


* del
NAME:
        del - Remove a variety of legoHDL-related things

SYNOPSIS:
        legohdl del <block> [-uninstall]

DESCRIPTION:

OPTIONS:



; --- MANAGEMENT COMMANDS ---


* list
NAME:
        list - View a variety of legoHDL-related things

SYNOPSIS:
        legohdl list [<search>] [[-unit [-all]] | [-D] [-I] [-A]] [-alpha]
        legohdl list [-script | -label | -market | -workspace | -profile | 
                -template]

DESCRIPTION:
        When passing a value for <search>, each subsection of a block's title 
        can be omitted. With each additionally provided title delimiter, the 
        values shift left to the next subsection. See EXAMPLES for more 
        information.

OPTIONS:
        <search>
                Optional field to narrow the given list by. 

        -unit
                Instead of listing blocks, list the entities.

        -alpha
                Organize the list in alphabetical order.

        -I
                Filter only installed blocks or entities.

        -D
                Filter only downloaded blocks or entities.    

        -A
                Filter only available blocks or entities from markets.

        -all
                Display all units, regardless if they are usable or not
                according to what 'multi-develop' is set to.
        
        -script
                Return the list of scripts. Fields are alias and command.

        -label
                Return the list of labels. Fields are label, extensions,
                and global.
        
        -market
                Return the list of markets. Fields a are market, remote 
                repository, block count, and active.
        
        -workspace
                Return the list of workspaces. Fields are workspace, active, 
                path, and markets.

        -profile
                Return the list of profiles. Fields are profile, last import, 
                legohdl.cfg, template/, and scripts/.

        -template
                Return the list of all availble files from the current template.
                These files can be referenced exactly as listed when 
                initializing a new file with the 'init' command.

EXAMPLES:
        legohdl list lab0
                Since a market is omitted and a library is omitted, all block's 
                starting with "lab0" in their name are returned.

        legohdl list eel4712c.  
                Since a market is omitted and a name is omitted, all block's 
                starting with "eel4712c" in their library are returned.

        legohdl list uf-ece..
                Since a library is omitted and a name is omitted, all block's 
                starting with "uf-ece" in their market are returned.

        legohdl list ..:mux_2x1 -entity
                All M.L.N subsections are blank, so the entire database is 
                searched to see if an entity exists with the name mux_2x1.


* refresh
NAME:
        refresh - Synchronize local market repositories with their remotes

SYNOPSIS:
        legohdl refresh [<market>] [-all]

DESCRIPTION:
        Checks for updates from market remote repositories and pulls them down
        to stay up-to-date.

        If no arguments are given, by default all markets available to the
        current workspace will try to refresh. If -all is given, every possible
        market, even outside workspace availability, will sync with its remote 
        (if exists).

OPTIONS:
        <market>
                The name of the known market to synchronize.

        -all
                Synchronize all markets across all workspaces.


* install
NAME:
        install - Bring a block to the workspace's cache for usage

SYNOPSIS:
        legohdl install <block> [-<version> | -requirements]

DESCRIPTION:

OPTIONS:


* uninstall
NAME:
        uninstall - Remove a block from the workspace's cache

SYNOPSIS:
        legohdl uninstall <block> [-<version>]

DESCRIPTION:
        Removes installed block versions from the workspace cache. 
        
        If -<version> is omitted, then ALL versions for the specified block will
        be removed. Specifying -<version> will only remove it and no others, 
        given it is installed. 
        
        Can also remove groups of versions by passing a partial version to
        -<version>.

OPTIONS:
        <block>
                :ref:
        
        -<version>
                Specific version to uninstall.


* download
NAME:
        download - Bring a block to the local workspace for development

SYNOPSIS:
        legohdl download <block> [-open]

DESCRIPTION:

OPTIONS:


* update
NAME:
        update - Get the latest installed block or profile

SYNOPSIS:
        legohdl update <block>
        legohdl update <profile-name> -profile

DESCRIPTION:
        <block>
                :ref:

        <profile-name>
                :todo:

        -profile
                :todo:

OPTIONS:


* info
NAME:
        info - Read detailed information about a block

SYNOPSIS:
        legohdl info <block> [-D | -I | -<version>] [-stats] [-vers]
        legohdl info <profile> -profile

DESCRIPTION:
        By default, will print the metadata about the given block. 
        
        If -version is applied, it will list all the available versions for 
        installation, and hightlight which versions are installed under the 
        workspace cache.

OPTIONS:
        <block>
                :ref:

        -D
                Return data from block at the download level, regardless of
                the status of 'multi-develop'.

        -I
                Return data from latest block at the installation level,
                regardless of the status of 'multi-develop'.

        -<version>
                Return data from the block with specified version/partial
                version.
        
        -stats
                Get relevant stats about the block such as units created.

        -vers
                List all available versions for the specified block.

        <profile>
                :ref:

        -profile
                Indicate that a profile is to be searched for its information.


* config
NAME:
        config - Edit/modify legoHDL settings

SYNOPSIS:
        legohdl config <profile-name> [-ask]
        legohdl config [-label=<label>:<extensions> [-global]] [-editor=<cmd>]  
                [-active-workspace=<ws>] [-author=<name>] [-template=<dir>] 
                [-multi-develop=<bool>] [-overlap-global=<bool>]
                [-refresh-rate=<rt>] [-profile=<profile-name>] 
                [-script=<alias>:<cmd>] [-workspace=<ws>:<path>] 
                [-market=<mrkt>[:<url>] [-link | -unlink]]
                

DESCRIPTION:
        :todo:

OPTIONS:
        <profile-name>
                An existing profile to import settings from.
        
        -ask
                Prompts the user before each import step (settings, template, 
                scripts) if the following should be imported and overloaded.

        :todo:


*